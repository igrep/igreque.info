{-# LANGUAGE OverloadedStrings #-}
module Main where

import Data.Monoid ((<>))
import Control.Applicative ((<$>))

import Debug.Trace
import Hakyll

-- general function for debugging
inspect :: Show a => String -> a -> a
inspect msg x = trace ( msg ++ ": " ++ show x ) x
--

inspectTags :: Show a => a -> a
inspectTags = inspect "tags"

main :: IO ()
main = hakyll $ do
  tags <- buildTags "posts/*" (fromCapture "tags/*.html")
  cssRules              -- Compressed CSS
  fontRules             -- Fonts
  postRules tags        -- Render posts
  postsListRules        -- Render posts list
  indexRules tags       -- Index
  taggedPostsRules tags -- Display posts tagged as a praticular tag
  atomRules             -- Atom feed
  templateRules         -- Template

templateRules :: Rules ()
templateRules = match "templates/*" $ compile templateCompiler

cssRules :: Rules ()
cssRules =
  match "css/*" $ do
    route   idRoute
    compile compressCssCompiler

fontRules :: Rules ()
fontRules =
  match "fonts/*" $ do
    route   idRoute
    compile copyFileCompiler

postRules :: Tags -> Rules ()
postRules tags =
  match "posts/*" $ do
    route   $ setExtension ".html"
    compile $ do
      let loadWithTags = loadTemplateIn (taggedCtx tags)
      pandocCompiler
        >>= loadWithTags "templates/post.html"
        >>= saveSnapshot "content"
        >>= loadWithTags "templates/default.html"
        >>= relativizeUrls

postsListRules :: Rules ()
postsListRules = do
  create ["posts.html"] $ do
    route idRoute
    compile $ do
      posts <- recentFirst =<< loadAll "posts/*"
      itemTpl <- loadBody "templates/postitem.html"
      list <- applyTemplateList itemTpl postCtx posts
      makeItem list
        >>= loadWithAllPosts "templates/posts.html"
        >>= loadWithAllPosts "templates/default.html"
        >>= relativizeUrls
  where
    loadWithAllPosts = loadTemplateIn allPostsCtx
    allPostsCtx = constField "title" "All posts" <> postCtx

indexRules :: Tags -> Rules ()
indexRules tags = do
  create ["index.html"] $ do
    route idRoute
    compile $ do
      posts <- recentFirst =<< loadAll "posts/*"
      itemTpl <- loadBody "templates/postitem.html"
      list <- applyTemplateList itemTpl postCtx posts
      makeItem list
        >>= loadAndApplyTemplate "templates/index.html" (indexCtx tags)
        >>= loadAndApplyTemplate "templates/default.html" defaultContext
        >>= relativizeUrls
      where
        indexCtx t =
          field "tagcloud" (\_ -> renderTagCloud 90 120 t)
          <> defaultContext

taggedPostsRules :: Tags -> Rules ()
taggedPostsRules tags = do
  tagsRules tags $ \tag pattern -> do
    route idRoute
    let title = "Posts tagged " ++ tag
    compile $ do
      list <- postList tags pattern recentFirst
      makeItem ""
        >>= loadAndApplyTemplate "templates/posts.html"
            ( constField "title" title
              <> constField "body" list
              <> defaultContext )
        >>= loadAndApplyTemplate "templates/default.html"
            ( constField "title" title
              <> defaultContext )
        >>= relativizeUrls

atomRules :: Rules ()
atomRules =
  create ["atom.xml"] $ do
    route idRoute
    compile $ do
      posts <- take 10 <$> (recentFirst =<< loadAllSnapshots "posts/*" "content")
      renderAtom feedConfig feedCtx posts
  where
    feedCtx = bodyField "description" <> postCtx
    feedConfig = FeedConfiguration
      { feedTitle       = "igreque :: Info -> RSS"
      , feedDescription = "RSS feed of igreque :: Info, generated by Hakyll."
      , feedAuthorName  = "Yuji Yamamoto"
      , feedAuthorEmail = "whosekiteneverfly@gmail.com"
      , feedRoot        = "http://the.igreque.info"
      }

taggedCtx :: Tags -> Context String
taggedCtx tags = tagsField "prettytags" tags <> postCtx

loadTemplateIn :: Context a -> Identifier -> Item a -> Compiler (Item String)
loadTemplateIn = flip loadAndApplyTemplate

postCtx :: Context String
postCtx = dateField "date" "%B %e, %Y" <> defaultContext

-- any better concrete name?
postList ::
  Tags -> Pattern -> ([Item String] -> Compiler [Item String])
    -> Compiler String
postList tags pattern preprocessor = do
    postItemTpl <- loadBody "templates/postitem.html"
    posts <- preprocessor =<< loadAll pattern
    applyTemplateList postItemTpl (taggedCtx tags) posts
