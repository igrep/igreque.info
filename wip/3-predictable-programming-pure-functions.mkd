---
title: 関数型プログラミングから予測可能プログラミングへ: 純粋な関数・イミュータブルな構造
author: Yuji Yamamoto
tags: Haskell
date: August 29, 2015
...
---

*[このシリーズの目次はこちら](/posts/2015/2-predictable-programming-index.mkd)*

今回の記事で述べることは、恐らくいわゆる「関数型プログラミング」の特徴として、
十分に知られたものであろう。
本記事ではhoge

# 純粋な関数

「純粋な関数」が何なのかは、[前の記事](/posts/2015/1-predictable-programming.html#definitionFunctionalProgramming)でも述べた。  
そうした「純粋な関数」が[「予測可能プログラミング」](/posts/2015/1-predictable-programming.html#definitionPredictableProgramming)
にもたらすメリットは実にシンプルで、
関数がプログラムに及ぼす**影響範囲が、結果を渡した先(束縛する変数や別の関数の引数)のみに限定**されるので、
余計なことを考えなくてよい、ということである。

例えば、JavaScriptの`Array#sort`を考えてみよう。

```javascript
var sorted = array.sort();
```

上記のような行が仮にどこかのアプリケーションのコードに含まれていたとしよう。
これを書いた本人は、
`array.sort()`の及ぼす**影響範囲**を正しく理解していると言えるだろうか？  
実際のところ、これだけでは分からない。
なぜなら、JavaScriptの`Array#sort`メソッドは、
呼び出した`array`を破壊的に変更するためである。
これだけでは、`sort`の結果の代入先（この場合変数`sorted`）のみに影響を与えたいのか、
それとも、それに加えて`sort`を呼んだ`array`にも影響を与えたいのか、
意図するところが不明瞭になってしまうのである。

これに対して「純粋な関数」では、
その定義上、「出力(返り値)を返す」以外にプログラムの状態に影響を及ぼさないので、
書く人も読む人も関数の結果を渡す先のみのことを考えればよい。  
「純粋な関数」は、常に**関数のもたらす影響範囲が、非常に明瞭**なのだ。

この特徴は、
プログラミング言語が強くそれをサポート、あるいは強制することで、その真価を発揮する。  
すなわちイミュータブルなデータ構造や、書き換えできない変数の推奨である。  

例えば、再びJavaScriptを例にあげてみよう。  
下記のように、今となってはJavaScriptのような、
通常「関数型プログラミング言語」とは呼ばれない言語でも、
`map`, `filter`といった、関数型プログラミングにおいて好んで使われる機能が提供されている。

```javascript
var mapped = array.map(function(n){
  if(n > 100){
    return processLargeValue(n);
  } else {
    return n;
  }
});
```

ところがJavaScriptのような、
関数が純粋な関数であってもなくてもよいような言語においては、
そうした機能の魅力は削がれがちである。
理由は単純で、上記の処理が本当に`array.map`の
結果を渡す先(この場合変数 `mapped`)以外に影響を与えないかどうかは、
`map`に渡した関数の中身、
この場合さらにその中で呼んでいる`processLargeValue`が純粋な関数かどうか、
すべてを読んで確認しないと分からないためである。  
そうした理由のためか、関数型プログラミングに慣れない人が書いたコードでは、
こうした奇妙な使い方をしがちである。

```javascript
var sum = 0;
var mapped = array.map(function(n){
  sum += n;
  return n * 2;
});
```

上記は、本来ならば`mapped`に値を代入するためだけにあるべき`map`が、
`sum`にも影響を与えてしまっている。私は同僚が書いたコードのレビューで、しばしばこうしたミスを見かけた。  
言語の仕様であれなんであれ、何らかの形で再代入や破壊的変更の禁止を推奨しなければ、
純粋な関数の「関数の戻り値のみに影響を与えるから、影響範囲を予測しやすい」
という価値を容易に損なってしまうのだ。

そうした意味において、Haskellをはじめとする、
いわゆる「関数型プログラミング言語」と呼ばれる言語は、
そうでない言語では実現しにくい、大きなアドバンテージを持つのである[^mapM]。

[^mapM]: ちなみに、実はHaskellなどでも、
`mapM`や`filterM`といった関数を使えば上記と似たような処理は実現できる。
詳細は次回述べる予定。

## 力の弱い関数

純粋な関数の

# イミュータブルな構造

## 単純で極端な例

JavaScriptの`Array#sort`や`undefined`など

## 並列処理との相性

# これだけではつまらないので次の予告を少し
