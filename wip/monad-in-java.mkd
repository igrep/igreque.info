---
title: JavaでMonadをはじめからていねいに
author: Yuji Yamamoto
tags: Monad, Java
date: July 25, 2016
...
---

「[モナドについてSwiftで説明してみた](http://qiita.com/koher/items/12f72f2fc2db7fa709cf)」という記事などで指摘されているように、プログラマー向けにMonadを説明した記事はサンプルがHaskellで書かれていることが多いので辛いですよね。

HaskellではMonadは「ないと文字通りプログラムが書けないぐらい」大事なもので、入出力処理や例外処理、ダイナミックスコープのシミュレーション、非決定計算など、普通の関数では難しい、非常に様々な機能の実装に使用されています。  
その一方、MonadはC言語のポインターに並んでHaskellを学ぶ上での障害である、なんて言われたりもするとおり、他言語ユーザーからHaskellを敬遠させる大きな要因の一つともなっています。

そんな悲しい現状を少しでも改善するために、上記の記事を参考にしつつ、HaskellよりもSwiftよりももっともっと広まっているであろう、Java (Java 8以降の知識を前提とします)でMonadを定義して説明してみたいと思います [^Haskell]。  
これを通して、

[^Haskell]: 念のため補足しますと、ここで説明するMonadはあくまでもプログラミングの世界、特にHaskellで使われているあの「Monad」の話です。あまり触れられませんが、圏論の世界で言う「モナド」とは目的も定義も厳密には異なります（どちらかというと圏論の「モナド」の方が定義が広いです）。アルファベットで「Monad」と表記しているのも、Haskellで使われているあの「Monad」がソースコードの中で「Monad」と表記されているためです。

- Monadの何が嬉しいのか
- よく聞く「Monad則」ってどんなやつなのか、何が嬉しいのか
- do記法がどんなことをしているのか

と言った点も説明したいと思います！
私自身Javaを勉強中なんで一石二鳥ですね！

あっ、「Java 8以降の知識を前提とします」とは言いましたが、ほかの似たような言語を知っていれば大体わかるようには書いたつもりなので、わかりにくいという場合はご連絡ください。  
[このページの一番下](#divide_footer)までスクロールして、私にメールかIssueを送っていただけるとありがたいです。

# 最初にまとめ (ここ以降がよくわかんなくても何となく知ってもらいたいこと）

- MonadをJavaで表現すると、インターフェースで表現することができる。
- do記法があるおかげで、HaskellではMonadが思いの外役に立つ。
- do記法をdo記法らしく直感的に使えるようにするためには、Monadインターフェースを実装したクラスが、Monad則というルールを守る必要がある。
- Monadは各文と文を繋ぐものの意味を変える、すなわち、（`+`などの演算子と同様に）セミコロンをオーバーライドできるようにしてくれる。

# 目次

- [とりあえずJavaでの定義を。](#definitionInJava)
- [具体的な実装その1 Maybe](#maybeInJava)
- [Monad則って？](#monadLaw)
    - [なんでそんなのがあるの？](#whyLaw)
    - [で、Monad則ってどんなのさ？](#monadLawInJava)
- [do記法](#doSyntax)
    - [do記法とMonad則 (B)](#doSyntaxAndLaw)
- [ここまでのまとめ](#summary1)
- [具体的な実装 その2 State](#stateInJava)
    - [そもそも、「純粋な関数」のみで命令型スタイルに見せる、とは？](#pretendImperative)
    - [`State`のコンストラクターがやっていること](#stateConstructor)
    - [`State.Return.doNothingReturning`がやっていること](#stateReturnDoNothingReturning)
    - [`State.then`でやっていること](#stateThen)
    - [具体的な使い方](#stateUsage)
    - [何が嬉しいの？](#stateGoodness)
    - [Stateまとめ](#stateSummary)
- [最後に](#bottomLine)
- [参考](#references)

# とりあえずJavaでの定義を。 {#definitionInJava}

手始めに、Monadの定義をJavaに翻訳してみましょう [^monad-in-haskell]。
Haskellや圏論での呼び方も、より分かりやすくなるようもっと具体的な名前に差し替えます。

[^monad-in-haskell]: Haskellに詳しい方はすぐに察することができるかと思いますが、`Monad`の`then`メソッドがHaskellでいうところの`>>=` (bind)に相当し、`Monad.Return`の`doNothingReturning`メソッドが`return`に相当します。

```java
/**
 * 本当は一つのインターフェースにまとめたいのですが、
 * Javaのインターフェースの都合上やむを得ず分けています。
 * 本来は2つ合わせて初めてMonadと呼べる、という点をお忘れなく。
 */
interface Monad<T1> /* (1) */{

  <T2> Monad<T2> then(Function<T1, Monad<T2>> action /* (2) */);

  interface Return {
    /* (3) */
    <T> Monad<T> doNothingReturning(T value);
  }
}
```

Java 8がある程度普及した現在、関数を受けとる関数を表現するのがらくちんになりましたね！  

番号を振ったところを解説しましょう。

- (1): 型引数を1つとります。なので、渡した型をラップする型となります。
- (2): 引数として、「ラップした型T1を受け取り、別の型T2をラップしたMonadを返す関数」を受け取ります。
    - 戻り値は、そのT2をラップしたMonadでなければなりません。
- (3): 任意の値一つを受け取って[^refval]、そのMonadのインスタンスを返す、ファクトリーメソッド的なものが必要です。

[^refval]: 参照型と値型の区別はこの際お見逃しください。やっぱりJavaで厳密にMonadを表現するのは難しい。

Java固有の情報を抜いて、もうちょっとオブジェクト指向な言語全般で通じそうな日本語で言うと、次のように言い換えられます。

Monad interfaceを実装したクラスは、

- ほかの型をラップする型でなければならない。
- `then`というメソッドを実装しなければならない。
- `then`は別のMonadのインスタンスを返す関数を受け取って、その返す関数と同じ型の値を返さなければならない。
- `doNothingReturning`というファクトリーメソッドを実装しなければならない。
    - 任意のクラスの値を1つ受け取って、そのインスタンスを作れなければならない。

いろいろ書きましたが、ここで特に大事なところは「**`then`というメソッドを実装しなければならない**」と「**`doNothingReturning`**を実装しなければならない」の二点です！

# 具体的な実装その1 Maybe {#maybeInJava}

**重要な注意事項**:  
次の例を含め、この記事で紹介する`Monad`インターフェースを実装したクラスは、残念ながら全てコンパイルが通りません。Javaのインターフェースの仕様上仕方ないのです。  
あくまでも**説明のためのコード**だということでご了承下さい。  
ダウンキャストなどを使って一応コンパイルを通したソースが[igrep/monad-in-java-sample](https://github.com/igrep/monad-in-java-sample)にあります。  
また、もっとちゃんとしたMonadのJavaによる実装に興味がある方は[highj](https://github.com/DanielGronau/highj)をご覧下さい（結構トリッキーな実装なので、今回の説明では使用しませんでした）。  
**重要な注意事項終わり**

さて、それではMonadについてもうちょっと具体的なイメージを持っていただくために、前節で定義した`Monad`インターフェース(と、対応する`Monad.Return`インターフェース)を実装したクラスの例を紹介しましょう。

```java
class Maybe<T1> implements Monad<T1> {
    private final T1 x;

    Maybe(T1 x){
        this.x = x;
    }

    public <T2> Maybe<T2> then(Function<T1, Maybe<T2>> nextAction){
        if (x != null){
            return nextAction.apply(x);
        } else {
            return new Maybe<>(null);
        }
    }

    public static class Return implements Monad.Return {
        public <T> Maybe<T> doNothingReturning(T x){
            return new Maybe<>(x);
        }
    }
}
```

上記は`then`において、持っている値(`x`)が`null`かどうかあらかじめ確認し、`null`でなければ引数として渡した関数(`nextAction`)を実行します。  
次の関数(`nextAction`)を実行する前に「`null`でないか確認する」のが上記の`Maybe`クラスの`then`の役割です。  
Monad則のところで触れたように、「Monadの値を作って返すだけで、それ以外のことはしない」のが`doNothingReturning`のお約束なので、Monadインターフェースを実装するクラスをより明確に特徴付けるのは、`then`メソッドの方です。  
そのため繰り返しになりますが、次の関数(`nextAction`)を実行する前に「`null`でないか確認する」のが上記の`Maybe`クラスの役割だ、と言い換えることもできるでしょう。

ところで、最近のJavaに慣れた方は`Maybe`がJava 8の`Optional`とそっくりなものであることにお気づきかもしれません。  
`Maybe.then`は`Optional.flatMap`に相当し、`Maybe.Return.doNothingReturning`は`Optional.ofNullable`に相当する、と考えると、確かに！  
事実、その前提で[open-jdkの`Optional.java`](http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/java/util/Optional.java)と見比べてみると、上記は`Optional.java`を大幅に簡略化したものと同等であることがわかります [^haskell-maybe]。

[^haskell-maybe]: ちなみに、Haskellの`Maybe`とはちょっと異なる振る舞いをします。
Haskellの`Maybe`は、`return`が`null`に相当する`Nothing`を返すことはないからです。
`null`と`Nothing`は実際には大きく異なるものなので単純に比較できませんが。詳しくはHaskellを勉強してみて確かめましょう！

`Optional`と同じようなものなので特に目新しい部分はないかもしれませんが、上記の`Maybe`の使用例を示しましょう。

```java
Foo maybeFoo1 = someMap.get(key1);
Maybe.Return r = new Maybe.Return();
Maybe<Bar> bar =
  r.doNothingReturning(maybeFoo1).then((foo1) -> {
    Foo maybeFoo2 = someMap.get(key2);
    return r.doNothingReturning(maybeFoo2).then((foo2) -> {
      Foo maybeFoo3 = someMap.get(key3);
      return r.doNothingReturning(maybeFoo3).then((foo3) -> {
        return r.doNothingReturning(foo1.doSomething(foo2, foo3));
      });
    });
  });
```

上記のように、`null`を返すかもしれないメソッドをたくさん使うとき、`Maybe`を使えば、`then`に`null`チェックをお任せすることができます。  
これでぬるぽともお別れだー！やったね！(^\_-)

...と、言いたいところですが、元ネタの`Optional.flatMap`を使った場合と同様、ネストが深くって嫌ですねー。  
これでは普通にif文を書いた方がまだ読みやすそうです。`r.doNothingReturning`なんて書く分タイプ数も多いですし。

`r.doNothingReturning`や`Maybe.Return r = new Maybe.Return();`の部分が長いのは単なる名付け方の問題だから（もっと短い名前を普及させればよいのであって）目をつぶるとして、結局ネストが深くなってしまう問題はどうにかならないのでしょうか？  
実はこれから説明する「Monad則」というのを利用すると、このような問題をクールに解決することができます！

# Monad則って？ {#monadLaw}

冒頭の通り、`Monad`インターフェースは`then`メソッドと`Monad.Return`の`doNothingReturning`メソッド、合わせて2つのメソッドを実装しなければなりません。  
加えて、これらのメソッドは「Monad則」というある一定の規則を満たして実装しなければならないよう決まっています。  
ここではこの「Monad則」についてもJavaに置き換えて紹介しましょう。  
詳細は後で解説するので、ここではひとまず重要な部分のみチラ見せします↓。

```java
// 下記の3組の式が**常に同じ意味となる**doNothingReturningとthen
// となっていなければ、thenとdoNothingReturningを実装していても、
// 「そのクラスはMonadである」とはいえません。
/* (A ) */ r.doNothingReturning(x).then((x) -> ax.apply(x))
           /* ↑と↓の意味が同じになること。以下同様。 */
           ax.apply(x)

/* (A') */ ax.apply(x).then((y) -> r.doNothingReturning(y))
           /* ↑と↓の意味が同じになること */
           ax.apply(x)

/* (B ) */ ax.apply(x).then((y) -> ay.apply(y).then((z) -> az.apply(z)))
           /* ↑と↓の意味が同じになること */
           ax.apply(x).then((y) -> ay.apply(y)).then((z) -> az.apply(z))
```

なんだかややこしいですね！

## なんでそんなのがあるの？ {#whyLaw}

そもそも、なぜこんな面倒な規則があるのでしょう？  
この法則を満たすとMonadは非常に便利に使えるようになるのですが、それについては後ほど説明します。  
その代わり、ここではJavaで言うところの似たような「規則」を紹介することで、「Monad則」の「立ち位置」みたいなものをお伝えしたいと思います。

例えば[Javaな方にはお馴染み`Comparable`インターフェース](http://docs.oracle.com/javase/jp/7/api/java/lang/Comparable.html)を実装したクラスは、以下のように振る舞うよう定められています。

`x.compareTo(y)`というメソッドを呼んだとき、

- `x`より`y`の方が「より大きい」時、`0`より大きい値（`1`にすることが多い)を返す。
- `x`より`y`の方が「より小さい」時、`0`より小さい値（`-1`にすることが多い)を返す。
- `x`と`y`が「等しい」時、`0`を返す。

これによって、ユーザーが自由に「全順序性」を持ったクラスを定義して、比較したりソートしたりできるようになるのでした。

ちなみに、RubyやPerlのスペースシップ演算子(`<=>`)やPythonの(`__cmp__`)など、そっくりな振る舞いを要求するメソッドは他の言語にもしばしばあります。  
以下の話はそれらに置き換えて読んでいただいても全く問題ありません。

そんな`Comparable`ですが、上記の規則を破って、下記のように振る舞う`Comparable`があったら嫌ですよね？

```java
/**
 * 引数とレシーバーを逆にしても1（より大きい）が返る！
 * どっちが本当に大きいの？
 */
x.compareTo(y) // => 1
y.compareTo(x) // => 1

/**
 * 自分自身と比較しても-1（より小さい）が返る！
 * どうやったら等しくなるんだ！？
 */
z.compareTo(z) // => -1
```

継承の仕方などによっては、間違って上記のようなおかしな振る舞いの`Comparable`を産み出してしまうことはあるでしょう。もちろん意図的にそうした実装を作ることも可能です。  
このように不自然な`Comparable`を作らないためには、`Comparable`を**実装する側が意識**しなければなりません。間違った実装を作ってしまっても、コンパイラーが「間違ってるよ！」と教えてくれないのです。

Monad則もこれと同じようなものです。  
Monadはそもそも圏論という数学の一分野で定義されたものなので、その定義に準拠したものであるためには、単純に`Monad`というインターフェースを実装するだけでなく、それに沿うよう気を付けて中身(`then`と`doNothingReturning`)を実装しなければなりません。  
そして、繰り返しますがこのMonad則を満たすからこそみなさんはMonadを便利に使えるのです！（詳細は後述！）

## で、Monad則ってどんなのさ？ {#monadLawInJava}

**これ以降を読む上でのヒント**: Java 8における`Function`型のオブジェクトは、`apply`メソッドを呼ぶことで実行できます。

前置きが長くなってしまいましたが、いよいよ「Monad則」をJavaで紹介しましょう！  
先ほどは省略した変数の定義も含めて、下記の通りです [^apply]！

[^apply]: Javaの関数オブジェクトやラムダ式の仕様上、本記事のMonad則で現れる`(x) -> ax.apply(x)`のような式は、本当は単に`ax`と書き換えることができます。  
それから、`(y) -> r.doNothingReturning(y)`も、単に`r::doNothingReturning`と書くだけでOKです。  
ですが説明しやすさのために敢えて冗長な記述をしております。ご容赦を。

```java
// 任意の型X, Y, Zの値をx, y, zとします。
X x;
Y y;
Z z;

// Monad.Returnをrとします
Monad.Return r = new SomeMonad.Return();

// それから、X, Y, Zを受け取って別のMonadの値を返す関数をax, ay, azとしましょう。
Function<X, Monad<Y>> ax = (x) -> ... ;
Function<Y, Monad<Z>> ay = (y) -> ... ;
Function<Z, Monad<A>> az = (z) -> ... ;

// 下記の3組の式が**常に同じ意味となる**doNothingReturningとthen
// となっていなければ、thenとdoNothingReturningを実装していても、
// 「そのクラスはMonadである」とはいえません。
/* (A ) */ r.doNothingReturning(x).then((x) -> ax.apply(x))
           /* ↑と↓の意味が同じになること。以下同様。 */
           ax.apply(x)

/* (A') */ ax.apply(x).then((y) -> r.doNothingReturning(y))
           /* ↑と↓の意味が同じになること */
           ax.apply(x)

/* (B ) */ ax.apply(x).then((y) -> ay.apply(y).then((z) -> az.apply(z)))
           /* ↑と↓の意味が同じになること */
           ax.apply(x).then((y) -> ay.apply(y)).then((z) -> az.apply(z))
```

<!--
return a >>= k  =  k a
m >>= return    =  m
m >>= (\x -> k x >>= h)  =  (m >>= k) >>= h
-->

各変数の定義まで書いてしまったので長ったらしくなってしまいましたが、一つずつ解説しましょう。

### (A), (A')について

最初の2つは、どちらかというと`doNothingReturning`が守るべき性質についての式です。

第一に(A)では、`x`に対して「なにもしないで」Monadの値を作って(`doNothingReturning(x)`)、それから(`then`)、更にMonadを返す関数`ax`を実行する(`ax.apply`)ということは、単に`ax`を1回実行するのと同じことだ
--- つまり、`doNothingReturning`をどんな`ax`の**前**に実行しても、`ax`を実行する(`ax.apply(x)`)のと同じ、なので`doNothingReturning`は**なにもしない**のと同等だ ---
ということです。

(A')についても同様です。  
`x`を受け取ってMonadを返す関数`ax`を実行(`ax.apply(x)`)して、それから(`then`)、「なにもしないで」Monadの値を作る(`doNothingReturning`)ことは、単に`ax`を1回実行するのと同じことだ
--- つまり、`doNothingReturning`をどんな`ax`の**後**に実行しても、`ax`を実行するのと同じ、なので`doNothingReturning`は**なにもしない**のと同等だ ---
ということです。

いずれにおいても、`doNothingReturning`は**Monadの値を作って返すだけで、実質なにもしない**という点が、ここでは重要です。
「そんなの役に立つの？」と思われるかもしれません。  
とりあえずは「定義上そう決まっているのでそういうものだ」とご理解しておいてください。ここから先の例でなんとなく伝われば幸いです。

### (B)について

(B)はちょっと複雑ですね。  
集中するために該当の部分だけ持ってきましょう。

```java
   ax.apply(x).then((y) -> ay.apply(y).then((z) -> az.apply(z)))
        /* ↑と↓の意味が同じになること */
   ax.apply(x).then((y) -> ay.apply(y)).then((z) -> az.apply(z))
```

ぱっと見どこが違うのかわかりませんね！違うのは↓に示す部分だけです！

<div class="sourceCode"><pre class="sourceCode java"><code class="sourceCode java"
>   ax.<span class="fu">apply</span>(x).<span class="fu">then</span><span class="sourceHighlight2">(</span>(y) -&gt; ay.<span class="fu">apply</span>(y)<span class="sourceHighlight1">.then((z) -&gt; az.apply(z))</span><span class="sourceHighlight2">)</span>
                                      <span class="co">^ この<span class="sourceHighlight1">.then((z) -&gt; az.apply(z))</span>が...</span>
   ax.<span class="fu">apply</span>(x).<span class="fu">then</span><span class="sourceHighlight2">(</span>(y) -&gt; ay.<span class="fu">apply</span>(y)<span class="sourceHighlight2">)</span><span class="sourceHighlight1">.then((z) -&gt; az.apply(z))</span>
                                       <span class="co">^ カッコ<span class="sourceHighlight2">()</span>を突き破って、ここに出された！</span></code></pre></div>

上記の通り、二つめの`then`、すなわち`ay.apply`の後ろにある<span class="sourceHighlight1">`then((z) -> az.apply(z))`</span>が、一つめの`then`、つまり`ax.apply(x).then`に渡したラムダ式から、**括り出せるようになっていなければならない**、ということです。

この規則によって、ネストを一段平たくできます。  
`then()`のカッコの中にインデントを加えてみるとよくわかるでしょう。

```java
ax.apply(x).then(
  (y) -> ay.apply(y).then(
    (z) -> az.apply(z)
  )
)
/* ↑と↓の意味が同じになること */
ax.apply(x).then(
  (y) -> ay.apply(y)
).then(
  (z) -> az.apply(z)
)
```

さて、この規則をもうちょっとくだけた日本語に言い換えると、

- 「`ax.apply(x)`してから『`ay.apply(y)`してから`az.apply(z)`する』」ことと、
- 「`ax.apply(x)`してから『`ay.apply(y)`してから』『`az.apply(z)`する』」ことが、

常に同じ意味でないといけない、と解釈できます。  
この解釈だと「そんなの当たり前じゃないの？」と感じられるかもしれません。  
それぐらい直感的な仕様を守ってくださいね、というのが「Monad則」の正体だ、と考えていただければしっくりくるでしょうか？  
`Comparable`な`x`が常に`x.compareTo(x) == 0`であってほしいのと同じことです。

## 「Monad則」(B)のMaybeへの応用 {#monadLawAndMaybe}

さて、Monad則の話が長くなってしまいましたが、Maybeのお話に帰りましょう。  
下記のようなMaybe Monadの例においてMonad則を応用すると、「ネストが深くって嫌ですねー」という問題をクールに解決することができる、というお話でした。

```java
Foo maybeFoo1 = someMap.get(key1);
Maybe.Return r = new Maybe.Return();
Maybe<Bar> bar =
    r.doNothingReturning(maybeFoo1).then((foo1) -> {
        Foo maybeFoo2 = someMap.get(key2);
        return r.doNothingReturning(maybeFoo2).then((foo2) -> {
            Foo maybeFoo3 = someMap.get(key3);
            return r.doNothingReturning(maybeFoo3).then((foo3) -> {
                r.doNothingReturning(foo1.doSomething(foo2, foo3));
            });
        });
    });
```

解決するヒントとして、「Monad則」の(B)を思い出してみましょう。

<div class="sourceCode"><pre class="sourceCode java"><code class="sourceCode java"
>   ax.<span class="fu">apply</span>(x).<span class="fu">then</span><span class="sourceHighlight2">(</span>(y) -&gt; ay.<span class="fu">apply</span>(y)<span class="sourceHighlight1">.then((z) -&gt; az.apply(az))</span><span class="sourceHighlight2">)</span>
   ax.<span class="fu">apply</span>(x).<span class="fu">then</span><span class="sourceHighlight2">(</span>(y) -&gt; ay.<span class="fu">apply</span>(y)<span class="sourceHighlight2">)</span><span class="sourceHighlight1">.then((z) -&gt; az.apply(az))</span></code></pre></div>

この規則は上の図のように、二つめの`then`、すなわち`ay.apply`の後ろにある<span class="sourceHighlight1">`then((z) -> az.apply(z))`</span>を、一つめの`then`、つまり`ax.apply(x).then`に渡したラムダ式からくくり出すことで、ネストを一段平たくすることができる、というものでした。  
おっ。ということは今回のケースにも適用できるかもしれませんよ！やってみましょう！

```java
Foo maybeFoo1;
Foo foo1, Foo foo2, Foo foo3;
Maybe.Return r = new Maybe.Return();

maybeFoo1 = someMap.get(key1);
Maybe<Bar> bar =
    r.doNothingReturning(maybeFoo1).then((foo1Arg) -> {
        foo1 = foo1Arg;
        return r.doNothingReturning(someMap.get(key2));
    }).then((foo2Arg) -> { // <- このラムダ式と、
        foo2 = foo2Arg;
        return r.doNothingReturning(someMap.get(key3));
    }).then((foo3Arg) -> { // <- このラムダ式がくくりだされた。
        foo3 = foo3Arg;
        return r.doNothingReturning(foo1.doSomething(foo2, foo3));
    });
```

よし、これならネストが減ってちょっと見やすくなった...? と、思いきや、今度はコンパイルエラーです... (&gt;\_&lt;)  
Java 8のラムダ式は、ラムダ式の中でローカル変数を書き換えることができないのでしたorz  
残念ながらこの問題は、現在のJavaではどうしようもありません。  
しかもいずれにしてもいちいち`foo1 = foo1Arg`みたいな代入が必要だったりで、結局面倒くさいですよね。

実はHaskellであれば、上記のような書き換えを自動で行い、自然な見た目にしてくれるシンタックスシュガー（糖衣構文）があります。  
それが次に示す「do記法」と呼ばれるものです。

# do記法 {#doSyntax}

本記事はあくまでもJavaでMonadを説明する記事ですので、ここではその「do記法」を**仮に**Javaに導入した場合を想像して、先程の例がどのように書き換えられるか示しましょう。

```java
Maybe.Return r = new Maybe.Return();

Maybe<Bar> bar = do {
    Foo foo1 <- r.doNothingReturning(someMap.get(key1));
    Foo foo2 <- r.doNothingReturning(someMap.get(key2));
    Foo foo3 <- r.doNothingReturning(someMap.get(key3));
    r.doNothingReturning(foo1.doSomething(foo2, foo3));
};
```

おお、`doNothingReturning`という長ったらしい名前さえどうにかなれば、もはや普通のJavaと区別がつかないくらい自然じゃありませんか！

「一体どこがどう糖衣構文で簡略化されたんだ？」という疑問にお答えしましょう。  
この場合、元のコードの`then`メソッドの呼び出しが、細い矢印 `<-` の箇所に置き換わったと考えると分かりやすいでしょう。  
`then`メソッドが「引数として渡された関数」に渡す引数(上記の場合`foo1`, `foo2`, `foo3`)について`null`かどうか確認していたのを、do記法では細い矢印 `<-` で`foo1`, `foo2`, `foo3`に代入する前に`null`かどうか確認するようになったのです。  
このような自動的な書き換えがあるからこそ、HaskellではMonadが思いの外便利に使えるのです。どうです？Javaにもちょっと欲しくなりませんか？

## do記法とMonad則 (B) {#doSyntaxAndLaw}

ついでに、この「do記法」とMonad則(B)ののっぴきならない関係を示すことで、Monad則(B)を守ることの重要性についてもお話ししましょう。  
復習のためにもう一度↓に持ってきました。

```java
    ax.apply(x).then((y) -> ay.apply(y).then((z) -> az.apply(z)))
        /* ↑と↓の意味が同じになること */
    ax.apply(x).then((y) -> ay.apply(y)).then((z) -> az.apply(z))
```

上記の通りMonad則(B)は、二つめの`then`の引数における`then((z) -> az.apply(z))`の部分が、一つめの`then`、つまり`ax.apply(x).then`に渡したラムダ式から、**処理の意味を変えずに、括り出せるようになっていなければならない**、ということでした。
これによってネストを一段平たくできるのでしたね。

この規則は、先程のdo記法を用いると、次のように表現することもできます。

<div class="sourceCode"><pre class="sourceCode java"><code class="sourceCode java"><span class="kw">do</span> {
    y &lt;- ax.<span class="fu">apply</span>(x);
    <span class="sourceHighlight2"><span class="kw">do</span> { <span class="co">// このdoブロック</span>
        z &lt;- ay.<span class="fu">apply</span>(y);
        az.<span class="fu">apply</span>(z);
    }</span>;
};</code></pre></div>

<span class="sourceHighlight2 co">`// このdoブロック`</span> と記されたdoブロックを引き剥がして、

<div class="sourceCode"><pre class="sourceCode java"><code class="sourceCode java"><span class="kw">do</span> {
    y &lt;- ax.<span class="fu">apply</span>(x);
    <span class="sourceHighlight2">z &lt;- ay.<span class="fu">apply</span>(y);</span>
    <span class="sourceHighlight2">az.<span class="fu">apply</span>(z);</span>
};</code></pre></div>

と必ず（処理の意味を変えずに）書き換えられなければならない、ということです。  
あるいは逆に、doブロックの範囲を上にずらして、

<div class="sourceCode"><pre class="sourceCode java"><code class="sourceCode java"><span class="kw">do</span> {
    <span class="sourceHighlight2">z &lt;- </span><span class="kw">do</span> {
        y &lt;- ax.<span class="fu">apply</span>(x);
        <span class="sourceHighlight2">ay.<span class="fu">apply</span>(y);</span>
    };
    <span class="sourceHighlight2">az.<span class="fu">apply</span>(z);</span>
};</code></pre></div>

のようにも書き換えられなければならない、とも言えます。

普通こんな無意味な書き換えはしないだろ、と思われるかもしれません。  
ところがリファクタリングしたくなったときなど、do記法で並べた各行を、他のメソッドとして切り出したくなったときはいかがでしょう？

先程の例で申しますと、

<div class="sourceCode"><pre class="sourceCode java"><code class="sourceCode java"><span class="kw">do</span> {
    <span class="sourceHighlight1">y &lt;- ax.<span class="fu">apply</span>(x);</span>
    z &lt;- <span class="sourceHighlight1">ay.<span class="fu">apply</span>(y);</span>
    az.<span class="fu">apply</span>(z);
};</code></pre></div>

↑の<span class="sourceHighlight1">色</span>を塗った箇所だけ切り出して

<div class="sourceCode"><pre class="sourceCode java"><code class="sourceCode java"><span class="kw">public</span> SomeMonad&lt;Z&gt; <span class="fu">extractedMethod</span>(X x){
    <span class="kw">return</span> <span class="kw">do</span> {
        <span class="sourceHighlight1">y &lt;- ax.<span class="fu">apply</span>(x);</span>
        <span class="sourceHighlight1">ay.<span class="fu">apply</span>(y);</span>
    };
}

<span class="kw">do</span> {
    z &lt;- <span class="fu">extractedMethod</span>(x);
    az.<span class="fu">apply</span>(z);
};</code></pre></div>

と書きたくなったり、  
あるいは、

<div class="sourceCode"><pre class="sourceCode java"><code class="sourceCode java"><span class="kw">do</span> {
    y &lt;- ax.<span class="fu">apply</span>(x);
    <span class="sourceHighlight2">z &lt;- ay.<span class="fu">apply</span>(y);</span>
    <span class="sourceHighlight2">az.<span class="fu">apply</span>(z);</span>
};</code></pre></div>

から、<span class="sourceHighlight2">色</span>を塗った箇所だけを切り出して

<div class="sourceCode"><pre class="sourceCode java"><code class="sourceCode java"><span class="kw">public</span> SomeMonad&lt;A&gt; <span class="fu">extractedMethod</span>(Y y){
    <span class="kw">return</span> <span class="kw">do</span> {
        <span class="sourceHighlight2">z &lt;- ax.<span class="fu">apply</span>(y);</span>
        <span class="sourceHighlight2">az.<span class="fu">apply</span>(z);</span>
    };
}

<span class="kw">do</span> {
    y &lt;- ax.<span class="fu">apply</span>(x);
    <span class="fu">extractedMethod</span>(y);
};</code></pre></div>

と書きたくなるかもしれません。

このように、do記法のどんなところから切り出しを行っても意味が変わらないようにするには、Monad則(B)を満たして、**入れ子を関係を気にしなくてもいいようにする**ことが、必要不可欠なのです。

# ここまでのまとめ {#summary1}

長くなりましたがここまでのまとめです。

- MonadをJavaで表現すると、`then`というメソッドを持ったインターフェースと、それに対応する、`doNothingReturning`というメソッドを持ったファクトリークラスのインターフェースで表現することができる。
- それらのインターフェースを実装するクラスは、「Monad則」を満たすように`then`と`doNothingReturning`を実装しなければならない。
    - Monad則を守ることによって、do記法はdo記法らしく直感的に使えるようになる。
    - そのdo記法があるおかげで、HaskellではMonadが思いの外役に立つ。
- Monadインターフェースを実装するクラスの振る舞いをより明確に特徴付けるのは、`Monad.Return.doNothingReturning`ではなく`then`メソッド。
- `Maybe`の`then`は、「次の関数を実行する前に値が`null`でないか確認」する。

# 具体的な実装 その2 State {#stateInJava}

さて、do記法のすごさを分かっていただけたところ（まだわからない場合、[このページの一番下](#divide_footer)までスクロールして、私にメールかIssueを送ってください！）で、Monadの別の例を紹介しましょう。  
今度はJavaではあまり役に立たないとは思いますが、**純粋な関数のみを使っているのに、あたかも命令型スタイルで書かれているかのように**見せる、魔法のようなMonadです。

ちょっとMonadじゃないクラスがいくつか出てきますが、Stateモナドが依存しているので、どうかご了承下さい。  
もちろん後で解説しますので...。

```java
// 状態を書き換えた結果を表すValue Object
class MutationResult<T, S> {
    public final S newState;
    public final T value;

    MutationResult(S newState, T value){
        this.newState = newState;
        this.value = value;
    }
}

// Stateモナドの実装
class State<S, T1> implements Monad<T1> {
    // 状態の書き換えをシミュレートするための関数オブジェクト
    public final Function<S, MutationResult<T1, S>> mutator;

    State(Function<S, MutationResult<T1, S>> mutator){
        this.mutator = mutator;
    }

    public <T2> State<S, T2> then(Function<T1, State<S, T2>> nextAction){
        Function<S, MutationResult<T2, S>> composedMutator = (oldState) -> {
            MutationResult<T1, S> result = this.mutator.apply(oldState);
            State<S, T2> other = nextAction.apply(result.value);
            return other.mutator.apply(result.newState);
        };
        return new State<>(composedMutator);
    }

    public static class Return<S> implements Monad.Return {
        public <T> State<S, T> doNothingReturning(T value){
            return new State<>(
                (nonMutatedState) -> new MutationResult<>(nonMutatedState, value)
            );
        }
    }
}
```

うーん、肝心のStateクラス以外のものがあったり、その上結構煩雑ですね...`(^-^;`  
これだけでは何のこっちゃと感じられる方も多いと思うので、ちょっとずつ解説しましょう。

## そもそも、「純粋な関数」のみで命令型スタイルに見せる、とは？ {#pretendImperative}

ここで言う「命令型スタイル」というのが「状態を書き換えることで結果を作る」プログラミングスタイルだとして、いわゆる「関数型プログラミング」 --- つまり純粋な関数のみを使用したスタイルでは、どうやって状態の書き換えを表現するのでしょう？

純粋な関数は、関数が返した値を使用しない限り、関数の外部へ影響を与えることができません。ということで素直に「古い状態を受け取って、新しい状態を返す」関数として表現してみましょう。  
Javaの`Function`で言うと↓のような感じ。

```java
Function<S, S> mutator;
```

しかしこれでは、「状態を書き換えたと同時に、別の値も返したい！」という時に不便ですよね。  
例えば、[Javaの`Map`の`remove`メソッド](https://docs.oracle.com/javase/jp/6/api/java/util/Map.html#remove\(java.lang.Object\))は、呼び出し元の`Map`の要素を取り除くことで状態を書き換えると同時に、取り除いた要素を返しますよね。  
そうした振る舞いをシミュレートするためには、「古い状態を受け取って、新しい状態を返す」だけでなく、「一緒に返す別の値」も返せるようにする必要があるのです。

と、いうわけで出来たのが先ほど挙げました`MutationResult`と`Function<S, MutationResult<T1, S>> mutator`です。  
↓にもう一度載せておきます。

```java
// 状態を書き換えた結果を表すValue Object
class MutationResult<T, S> {
    public final S newState; // 新しい状態
    public final T value;    // 一緒に返す値

    MutationResult(S newState, T value){
        this.newState = newState;
        this.value = value;
    }
}

class State<S, T1> implements Monad<T1> {
    // 状態の書き換えをシミュレートするための関数オブジェクト
    // Sという型の新しい状態とともに、Tという型の書き換えた結果も返す
    public final Function<S, MutationResult<T1, S>> mutator;
}
```

「状態を書き換えたと同時に、別の値も返したい！」というニーズを満たすため、「新しい状態」と「一緒に返す別の値」とのペアを表すクラス `MutationResult` を作りました。`Function<S, MutationResult<T1, S>>`は古い状態を受け取って、`MutationResult`のインスタンスを返すだけです。

なお、これ以降`Function<S, MutationResult<T1, S>>`のような型の関数を、単純に「`S`と`T1`の**mutator**」と呼ぶことにします。`Function<S, MutationResult<T1, S>>`とか「古い状態を受け取って、新しい状態と一緒に別の値を返す関数」では単純に長いので。

## `State`のコンストラクターがやっていること {#stateConstructor}

```java
class State<S, T1> implements Monad<T1> {
    public final Function<S, MutationResult<T1, S>> mutator;

    State(Function<S, MutationResult<T1, S>> mutator){
        this.mutator = mutator;
    }
    // ...
}
```

コンストラクターでやっていることは、単に引数をインスタンス変数にいれるだけのボイラープレートなコードです。  
ここで注目していただきたいのは、`State<S, T1>`は、`Function<S, MutationResult<T1, S>>`、すなわち「`S`と`T1`のmutator」を**ラップしただけ**のクラスであることです。  
`State` Monadはこれにちょっと色を着けるだけで、あたかも命令型スタイルで書いているかのように錯覚させることができるのです！

## `State.Return.doNothingReturning`がやっていること {#stateReturnDoNothingReturning}

難しい`State.then`は後回しにして、先に`doNothingReturning`を解説しましょう。  

```java
class State<S, T1> implements Monad<T1> {

    // ...

    class Return<S> implements Monad.Return {
      public <T> State<S, T> doNothingReturning(T value){
        return new State<>(
            (nonMutatedState) -> new MutationResult<>(nonMutatedState, value)
        );
      }
    }
}
```

Monad則上、`doNothingReturning`はMonadの値を作って返すだけで、それ以外のことはしてはいけません。  
このルールに加えて、先ほど説明した、「`State<S, T1>`は、`S`と`T1`のmutator、すなわち、**書き換えた状態と、一緒に別の値を返す関数**をラップしただけのクラスである」という事実を思い出してください。  
それでは「書き換えた状態と、一緒に別の値を返す関数」のうち、「何もしない」ものを作るにはどうすればよいでしょう？  
「**状態を書き換えないで、そのまま返す**」というのが正解です。  
`State.Return.doNothingReturning`は、  
`(nonMutatedState) -> new MutationResult<>(nonMutatedState, value)` という、

- `nonMutatedState`を何も書き換えずにそのまま返し、
- 加えて引数`value`を「一緒に返す別の値」として返すだけ

の関数を作っているのです。

繰り返しになりますが、`State.Return.doNothingReturning`は、「受け取った状態を全く書き換えないで返す関数」を作る、ただそれだけのことをしています。

## `State.then`でやっていること {#stateThen}

それでは本題、Monadインターフェースにとって最も重要なメソッド、`State`の`then`の詳細を解説しましょう。  
説明のために番号をコメントにふって載せますね。↓

```java
class State<S, T1> implements Monad<T1> {
  public final Function<S, MutationResult<T1, S>> mutator;
  // ...
  <T2> State<S, T2> then(Function<T1, State<S, T2>> nextAction){
    // (1) 新しく「状態を書き換えて
    Function<S, MutationResult<T2, S>> composedMutator = (oldState) -> {
      // (2) 古い状態を書き換え、結果を受けとる
      MutationResult<T1, S> result = this.mutator.apply(oldState);
      // (3) (2)で状態を書き換えた際に一緒に返した値を、次のState Monadを作る関数へ渡す。
      State<S, T2> other = nextAction.apply(result.value);
      // (4) (2)で状態を書き換えた状態をまた処理する
      return other.mutator.apply(result.newState);
    };
    // (1) また別のState Monadとしてくるみなおす。
    return new State<>(composedMutator);
  }
  // ...
}
```

まずは`(1)`を着けた**2ヶ所**に注目してください。
コメントに書いた通りですが、`State.then`メソッドでは新しいmutatorを作って、また`State`オブジェクトとしてくるみなおしています。  
後半の、`State`オブジェクトとしてくるみなおす部分は、型を合わせるためだけのものです。  
なので`State` Monadの`then`は(そしてその糖衣構文である`do`も)、「**mutatorを新しく作ることで、いい感じに組み合わせる**」ためにある、言う点を覚えておいてください。

`(2)`は最初の状態書き換えです。結果を`MutationResult`として返すことで「書き換えた後の状態」と「一緒に返す値」を、`(3)`や`(4)`でそれぞれを利用できるようにします。

`(3)`では、`(2)`で手に入れた「書き換えた結果（`MutationResult`）」のうち、「一緒に返す値」を利用して、新しい`State` Monadを作ります。  

<!--
`result.value`を渡している`nextAction`の型を振り返ってみていただくと分かるのですが、
`nextAction`は「`Function<T1, State<S, T2>>`」と宣言されている通り、`T1`を受け取って、`State` Monadを返す関数となっているからです。
ちょっとややこしいですね。
-->

`(4)`では、`(3)`で手に入れた`State` Monadのmutatorを利用して、`(2)`で書き換えた状態（`MutationResult.newState`）を更に書き換えます。  
そうして`(4)`で返された`MutationResult`が、`State.then`メソッド1回でできる最終的な状態の書き換えの結果となります。

さて、`(1)`～`(4)`まで色々やりましたが、結局のところ、`State.then`は全体として何をしているのでしょうか。あるいは、mutatorをどのように「いい感じに」組み合わせているのでしょうか？  
それは、**最初のmutator(`this.mutator`)で`mutate`してから、引数で渡されたmutator(`other.mutator`)で`mutate`する**ように組み合わせている、ただそれだけです。  
ややこしいのは途中で`MutationResult`を「書き換えた状態」と「一緒に返す値」に分解しているところです。  
上記のコードの`state`を処理している箇所のみに注目してみてください。  
`oldState`を`this.mutator.apply`した結果を`other.mutator.apply`しているだけ、ということにお気づきでしょうか？

更に簡潔にまとめますと、`State.then`は**状態を書き換える関数(mutator)を、続けて実行するよう組み合わせる**ということをしています。

## 具体的な使い方 {#stateUsage}

説明が長くなってしまいましたが、いよいよ`State` Monadの使用例を示しましょう。  
ひとまずここまで挙げたメソッドを組み合わせて、実用上ないと困る、ユーティリティメソッドを作ってみます。

```java
class State<S, T1> implements Monad<T1> {
    /* ... */

    // 引数で与えた状態に書き換える
    public static <S> State<S, Void> put(S newState){
        Function<S, MutationResult<Void, S>> putter =
            (ignoredState) -> new MutationResult<>(newState, null);
        return new State<>(putter);
    }

    // 現在の状態を取得する
    public static <S> State<S, S> get() {
        Function<S, MutationResult<S, S>> getter =
            (currentState) -> new MutationResult<>(currentState, currentState);
        return new State<>(getter);
    }

    // 引数で与えた関数で、状態を書き換える
    public static <S> State<S, Void> modify(Function<S, S> simpleMutator){
        Function<S, MutationResult<Void, S>> modifier =
            (currentState) -> {
                S newState = simpleMutator.apply(currentState);
                return new MutationResult<>(newState, null);
            };
        return new State<>(modifier);
    }
    /* ... */
}
```

まずは`State.put`について。  
`State.put`は新しい状態(`newState`)を引数として受け取り、前の状態(`ignoredState`)を使わず、そのまま新しい状態(`newState`)で書き換えるmutatorを返します。  
`new MutationResult<>()`の第一引数が「書き換えた新しい状態」で、第二引数が「一緒に返す値」であることを思い出してください。  
`State.put`メソッドでは「書き換えた新しい状態」として受け取った`newState`をそのまま渡し、「一緒に返す値」として`null`、すなわち「一緒に返す値」がないものとしています。  
これは、Javaで例えるなら戻り値が`void`のメソッドのようなものです。戻り値の型が`State<S, Void>`になっている通りです。

続いて`State.get`について。  
`State.get`がラップして返すmutatorは、引数として受けとる`currentState`をそっくりそのまま`new MutationResult<>()`の第一引数として渡して返します。  
状態を一切書き換えないのです。あくまでも`get`するだけですからね。  
そして状態を書き換えた際に「一緒に返す値」である`new MutationResult<>()`の第二引数にも、`currentState`をそのまま渡しています。  
これにより、`State.get()`を使うと、現在の状態をそのまま取得することができます。

最後に`State.modify`について。  
`State.put`と同様に、`State.modify`も戻り値の型は`State<S, Void>`です。すなわち状態を書き換えるだけで、「一緒に返す値」を返しません。  
`State.put`が新しい状態を引数から受け取っていたのに対して、`State.modify`では、前の状態に（第一引数として受け取った）関数を適用することで、新しい状態を作ります。  
`simpleMutator`と呼んでいる通り第一引数の関数は、単純に書き換える前の状態を受け取って、変更後の状態を返す関数なのです。

`State` Monadは実用上、ここまで紹介したユーティリティメソッド、`State.put`・`State.get`・`State.modify`を中心に利用した方が、直感的で使いやすいかと思います。  
と、いうわけで上記の`State.get`と`State.put`を利用して、`StringBuilder`を真似したような例を紹介しましょう。

```java
State<String, Void> builder =
          // 状態を取得して、次の関数に渡す。
    State.get()
          // ↓getから渡された状態に処理を加え、書き戻す。
         .then((currentString) -> State.put(currentString + "one!"))
         .then((_null /* どうせ State.put が返す（次の関数に渡す）値はnullなので無視する */) ->
             // ↓また状態を取得する。今度は前の行でputした後の状態が返ってくる。
             State.get()
         )
         // あとはその繰り返し。
         .then((currentString) -> State.put(currentString + "two!"))
         .then((_null) -> State.get())
         .then((currentString) -> State.put(currentString + "three!"));

System.out.println(
    // 初期値を渡すことで、初期値から書き換えていった結果が得られる
    // この場合 "zero! one!two!three!" と出力される
    builder.mutator.apply("zero! ").newState
);
```

あるいは、`State.modify`を利用して次のように書くこともできます。

```java
State<String, Void> builder =
    State.modify((currentString) -> currentString + "one!")
         .then((_null) -> State.modify((currentString) -> currentString + "two!"))
         .then((_null) -> State.modify((currentString) -> currentString + "three!"));
```

今回のケースではこちらの方がすっきりして分かりやすいでしょうね。

## 何が嬉しいの？ {#stateGoodness}

さて、ここまで長々と`State` Monadについて説明しましたが、いったいこんなものを作って何が嬉しいのでしょう？  
この章の冒頭でも触れた通り正直に言って、Javaではあまり役に立ちません。  
特に上記の例に限って言えば、普通に`StringBuilder`を使って書いた方が読みやすさの観点からも実行効率の観点からも明らかに優れています。  
そもそもJavaでは変数もオブジェクトもミュータブル（変更可能）なのですから、敢えてこんなものを作る必要はないですしね。

一方、これはHaskellでは結構役に立ちます。  
Haskellでは、型によって**関数のできることに厳格な制約**がかけられます（主にデバッグのために使われる例外はあります）。  
通常の関数は「決められた型の値を受け取って、決められた型の値を返す」以外に、全く何も出来ません。  
Javaではクラスの設計によって、利用者がそのクラスを使ってできることに制限を加えたりできますが、ある意味、Haskellでは言語仕様レベルでそのような厳重な制限がかけられています。  
このことは一見厳しすぎるように見えるかも知れませんが、実際には極めて大きなアドバンテージでもあります。  
本記事の守備範囲から離れてしまうので、お話しできないのが残念なくらいには。

しかし実際問題として、こうした制約が面倒に感じられることも多々あります。  
よくあるのは、値を返しては別の関数に渡し、また値を返しては別の関数に渡し...というのを繰り返したいケースです。  
こうしたケースでは、新しい変数名を考えるのもかったるいくらい、冗長な記述になってしまうでしょう。  
それから、型を定義して表現したい対象について、命令型プログラミングスタイルで考えた方が相性がよいように感じられる場合、というのもあるでしょうね。

HaskellのState Monadは、そうしたケースにおいて、ちょうどよい「抜け道」を空けてくれます。  
先程の例をよく振り返っていただきたいのですが、変数 `builder` を作るのに使うラムダ式や、`State` Monadの各種メソッドに至るまで、Java組み込みの`System.out.println`以外、**すべて純粋な関数のみで構成されている**ことにお気づきでしょうか？  
`builder.mutator.apply("zero! ")`してから`newState`を得るまでの全ての関数が、「戻り値が引数によってのみ定まり、『戻り値を返す』以外になにもしない」「純粋な関数」でできているのです。

このように`State` Monadは、純粋な関数のみを使っているのにあたかも命令型スタイルで書かれているかのように見せる、魔法のようなMonadとなのです。  
do記法を使って書き換えると、そのことをもっと実感できるでしょう。

ただし、先程の`Maybe` Monadの例から、もう少しdo記法でできることを増やしましょう。  
`State` Monadの例において、

```java
.then((currentString) -> State.put(currentString + "one!"))
.then((_null /* どうせ State.put が返す（次の関数に渡す）値はnullなので無視する */) ->
    // ↓また状態を取得する。
    State.get()
)
```

とか、

```java
.then((_null) -> State.modify((currentString) -> currentString + "three!"));
```

などの`then`メソッドでは、コメントにも書いた通り、ラムダ式の第1引数(`_null`)が無視されています。  
これは、`State.put`メソッドや`State.modify`メソッドが「状態を書き換えた際に、一緒に返す値」として`null`を返しているため、役立たずなためです。  
<!--
`State.modify`はあくまでも状態を書き換えることしかしないんですね。

`State` Monadに限らず、Monadは定義上`interface Monad<T1>`となっていることから分かるように、なにかしら「(`T1`にあたる)他の値」がくっついてくるものですが、このように、「実際には何もくっついてない」なんてことがよくあります。  
-->
そうしたケースをより簡単に書けるように、`then`メソッドに渡す関数の、第1引数にあたる箇所を省略できるようにしましょう。  
その結果がこれ↓です。

```java
State<String, Void> builder = do {
    currentString <- State.get();
    State.put(currentString + "one!");

    currentString <- State.get();
    State.put(currentString + "two!");

    currentString <- State.get();
    State.put(currentString + "three!");
};
```

```java
State<String, Void> builder = do {
    State.modify((currentString) -> currentString + "one!");
    State.modify((currentString) -> currentString + "two!");
    State.modify((currentString) -> currentString + "three!");
};
```

ますます普通の手続き型スタイルっぽくなりましたね！  
`State.put`したり`State.modify`することによって書き換えられる新しい状態が、`do`ブロックの中で直接現れず、`do`ブロック全体で共有されるようになります。  
`State.get`の結果か、`State.modify`に渡したラムダ式の中からでしか、現在の状態は見えません。「現在の状態」は`do`ブロックの中で**暗黙に共有**されるようになるのです。

さて、この場合どう糖衣構文で簡略化されたのでしょう？  
元のコードの`then`メソッドの呼び出しが、セミコロン「`;`」、つまり文の終端に置き換わったと考えると分かりやすいです。  
`State.modify`などが返した`State` Monadを、セミコロン 「`;`」 が`then`メソッドを呼び出して処理しているのです。具体的には、繰り返しになりますが、「状態を書き換える関数(mutator)を、続けて実行するよう組み合わせて」いるのです。

これは[Monadを「プログラマブルセミコロン」として例える主張](http://zacharyvoase.com/2014/04/30/monads/)ともぴったり一致します。  
上記の主張を借りるならば、Monadは（`+`などの演算子と同様に）**セミコロンをオーバーライド**できるようにしてくれるのです。

## Stateまとめ {#stateSummary}

長くなってしまいましたのでここで一旦まとめます。もう次が「最後に」なんですけどね。

- `State` Monadでは`then`メソッドが、状態を書き換える関数を続けて実行するよう組み合わせる。
- `State` Monadは純粋な関数だけの組み合わせで、命令型プログラミングのスタイルで書けるようにすることができる。
- `State` Monadは、「関数は全て純粋でないとならない」という(Haskellなどの)制約において、「抜け道」を作るのに役に立つ。
- Monadは（`+`などの演算子と同様に）**セミコロンをオーバーライド**できるようにしてくれる。

# 最後に {#bottomLine}

Monadはセミコロン、つまり文と文を繋ぐもの、「各文の間にあるもの」を変えることを可能にします。  
`Maybe` Monadの例ではそのことに触れず「[細い矢印 `<-` の箇所に置き換わった](#doSyntax)」と説明しましたが、「セミコロンの箇所で`null`チェックをしている」と解釈しても今ならそんなに違和感ありませんよね？

また、Monadの説明でよく出てくる「文脈」[^context]という概念はここで言う「各文の間にあるもの」と捉えていただくと、もっといろいろしっくり来るのではないでしょうか。  
例えば`Maybe` Monadであれば、各文の間に「結果が`Nothing`でないかどうかチェックし、`Nothing`であれば次の文の実行をやめる」という処理がありますし、State Monadであれば、「前の文で書き換えた状態を、次の文に渡す」という処理があります。
他のMonadをご存じであれば、それも考えてみてください。各Monadへの理解がいっそう深まることでしょう。

[^context]: 例えば<a href="http://www.amazon.co.jp/gp/product/4774169269/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=4774169269&amp;linkCode=as2&amp;tag=poe02-22">関数プログラミング実践入門</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=poe02-22&amp;l=as2&amp;o=9&amp;a=4774169269" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />の211ページの「本章で説明するモナドは、端的には『文脈を伴う計算』同士を組み合わせ可能にするしくみです」という文。

最後に繰り返しになりますが、まとめをもう一度挙げておきます。

- MonadをJavaで表現すると、インターフェースで表現することができる。
- do記法があるおかげで、HaskellではMonadが思いの外役に立つ。
- do記法をdo記法らしく直感的に使えるようにするためには、Monadインターフェースを実装したクラスが、Monad則というルールを守る必要がある。
- Monadは各文と文を繋ぐものの意味を変える、すなわち、（`+`などの演算子と同様に）セミコロンをオーバーライドできるようにしてくれる。

それではMonadでHappy Hacking!

# 参考 {#references}

- [モナドについてSwiftで説明してみた - Qiita](http://qiita.com/koher/items/12f72f2fc2db7fa709cf)
- [java - How can I force a Constructor to be defined in all subclass of my abstract class - Stack Overflow](http://stackoverflow.com/questions/3164334/how-can-i-force-a-constructor-to-be-defined-in-all-subclass-of-my-abstract-class)
- [Javaラムダ式メモ(Hishidama's Java8 Lambda Expression Memo)](http://www.ne.jp/asahi/hishidama/home/tech/java/lambda.html)
- [Monads, or Programmable Semicolons | Zack’s Blog](http://zacharyvoase.com/2014/04/30/monads/)
- [改訂2版 パーフェクトJava](https://gihyo.jp/book/2014/978-4-7741-6685-8)
- [関数プログラミング実践入門](https://gihyo.jp/book/2014/978-4-7741-6926-2)
