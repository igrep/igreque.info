---
title: Attended LambdaConf 2015 in Boulder!
author: Yuji Yamamoto
tags: Haskell, Elm
lang: en
...
---

I attened LambdaConf 2015, hold from May 22 to May 24.

# What I learned

Here's a list of sessions I took (or planned to take) part in during the conference.  
I tell their summary and my impression only for ones I could watch without sleeping.  
(I feel regret and sorry but I sufferred from jet lag...)

## Day 1

- [Write Some Idris](https://github.com/degoes-consulting/lambdaconf-2015/tree/master/speakers/puffnfresh)
    - Introduction to Idris. And introduction to dependent types for me.
    - Interesting but very difficult perhaps because I couldn't hear the details. During the session I guessed the answer and tried to tinker the sample codes, but in vail.
- [Developing Web Applications with Haskell](https://github.com/serras/lambdaconf-2015-web)
    - Learned from building HTML (with shakespeare), routing (with Spock), ORM (with persistent), to form validation (with digestive-functors).
    - I had fun and understood very well. Because I knew a bit about the theme before this and Alejandro's voice was clear and loud enough.
    - But I couldn't do most of the exercises because I was almost always cabal-install-ing in each exercise's sandbox...
- [A Practical Introduction to Haskell GADTs](https://github.com/degoes-consulting/lambdaconf-2015/tree/master/speakers/goldfirere)
    - Well, as I remember, about implementing dependent types with GADTs, maybe.
    - I felt bad by jet lag before exercise 2. I'm sorry that I couldn't use [glambda](https://github.com/goldfirere/glambda) though I compiled in the morning.
- [LiquidHaskell: Refinement Types for Haskell](http://ucsd-progsys.github.io/liquidhaskell-tutorial/)
    - As its title, tutorial of LiquidHaskell.
    - But the only part I saw was the last; I was sleeping from the previous session on.
    - Even the last part (maybe the case study) made me impressed with the power of LiquidHaskell. So I'll review the book (the above link).

## Day 2

- [Pattern Functors: Wandering Around Fix-points, Free Monads and Generics](https://github.com/degoes-consulting/lambdaconf-2015/blob/master/speakers/serras/pattern-functors.pdf))
- [Give me Freedom or Forgeddaboutit: What Does "Free" Really Mean?](https://github.com/degoes-consulting/lambdaconf-2015/blob/master/speakers/tel/freedom.pdf)
    - Free is free because it makes a Functor a Monad for free, as List makes any Hask object a Monoid.
    - The speaker and slide must have said more, but only I could understand is that.
    - I've been learning category theory a little. But I could understand little of them.
- [Finally Tagless DSLs and MTL](https://github.com/degoes-consulting/lambdaconf-2015/blob/master/speakers/tel/mtl.pdf)
- Accelerating Haskell: GPGPU Programming with Haskell
    - Introduction to GPGPU and [accelerate](http://hackage.haskell.org/package/accelerate), provides an easy way to use GPGPU in Haskell.
    - I heard about accelerate in [Parallel and Concurrent Programming in Haskell](http://chimera.labs.oreilly.com/books/1230000000929), but never used.
      So I'd be glad if I have a nice workshop to learn... (actually I wouldn't use it voluntarily. Because I don't think I should use it so far...)
- In Rust We Trust
    - About attractions of Rust, Mozilla's programming language.
    - Things I got impressed with were:
        - Memory management by ownership (without both GC and runtime!). Sounded like linear type to me.
        - Default immutability.
        - Support of combinators I (as a functional programmer) am familiar with (e.g. map, filter, take_while).
- [Introduction to Intuitionistic Type Theory](https://github.com/degoes-consulting/lambdaconf-2015/blob/master/speakers/vpatryshev/intuitionistic-type-theory/IntroToIntuitionisticTypeTheory.pptx)
- [Introducing Emily: Simplifying Functional Programming](https://github.com/degoes-consulting/lambdaconf-2015/tree/master/speakers/mcclure)
    - In [Emily](http://emilylang.org), all is access to a JavaScript's object. Even assignment statement (such as `a = 123`) is a syntactic sugar of `set` method of a scope object.
    - It looked like Lisp based on JavaScript's object to me. Interesting.
- [The Next Great Functional Programming Language](https://github.com/degoes-consulting/lambdaconf-2015/blob/master/speakers/jdegoes/next-great-fpl/presentation.pdf)
    - John (seems the leader of LambdaConf 2015) told us many features of his ideal language (of cource most of them must be jokes) by criticizing various features and bad points of today's languages.
    - All people in the hall discussed most actively in the day, and then prolonged the session very well. They looked very fun :)

## Day 3

- [An Adventure in Elm: Writing an Adventure Game in Elm](https://github.com/rtfeldman/lambdaconf-2015-elm-workshop)
    - Tutorial of Elm.
    - I'm glad to use Elm for the first time even though I declared ["Do Elm from today!" in the previous post (in Japanese)](/posts/2015-02-17-kbkz_tech.html)
    - The speaker Joe Nash was so kind that many audience (including me) asked questions comfortably.
    - Elm was actually easy and powerful for me. I wish to use more...

# What I did

Besides sessions about programming, we enjoyed hiking in LambdaConf 2015!

![Town among Mountains](/imgs/2015-05-25-boulder-town-among-mountains.jpg)

![Mountains in Boulder](/imgs/2015-05-25-boulder-mountains.jpg)

As the photos above show, Boulder is among mountains. I used to see beautiful mountains from everywhere.
Then of cource it's near from hiking trails. So we hiked there with the leader of LambdaConf, John.

And [as LambdaConf 2015's intro says](http://www.degoesconsulting.com/lambdaconf-2015/#lambdaconf-h1),
people in Boulder held [a festival around the downtown](http://www.bceproductions.com/boulder-creek-festival/).
It seems John intentionally scheduled LambdaConf 2015 for those days, to make us have fun with Boulder more!  
I think it's really nice idea, I found and felt John's love toward Boulder strongly.

And I played bungee-jumping without string from there!

![](/imgs/2015-05-25-boulder-creek-festival-jumping-step.jpg)

# What I didn't

# Thanks to all!
