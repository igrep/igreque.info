---
title: Windowsのコマンドライン引数でのクォートの話
author: YAMAMOTO Yuji
tags: PowerShell
qiitaTags: PowerShell Windows
date: December 11, 2021
canonicalUrl: https://qiita.com/igrep/items/d4251d12e85cfc0a00df
...
---


この記事は、もともとQrunchというサービスに掲載していた記事ですが、サービスごとなくなっていました。今回、[ググって解決しづらかったこと Advent Calendar](https://qiita.com/advent-calendar/2021/gseach)のテーマにぴったりだと感じたので11日目の記事として再掲致します。

以下、公開当時の内容をそのまま載せます。

ここ数年開発時はPowerShellを使っていて、ずっと困っていたことがありました。

例えば`git commit`の`-m`オプションにダブルクォートを渡したくなったとき、[PowerShellではエスケープシーケンスにバッククォートを使う](https://bayashita.com/p/entry/show/90)とのことなので👇のように書いてみたとします:

```pwsh
> git commit -m "Implement `"Hello, world`" finally!"
error: pathspec 'world finally!' did not match any file(s) known to git
```

なぜかダブルクォートが適切にエスケープされていないかのようなエラーになってしまいました。

シングルクォートで囲えばいいだろ、と思ってやってみてもやっぱりダメ:

```pwsh
> git commit -m 'Implement "Hello, world" finally!'
error: pathspec 'world finally!' did not match any file(s) known to git
```

おかしいなぁと悩みながら、なんとなくバッククォートの前にバックスラッシュを付けてみたところ、なんとうまくいくじゃありませんか！

```pwsh
> git commit -m "Implement \`"Hello, world\`" finally!"
On branch master
Your branch is up to date with 'origin/master'.

...
```

なぜだろうと首をひねっていたところ、[Twitterでこんな⬇️情報を教えていただきました](https://twitter.com/objectxplosive/status/1262768174761521152):

- [How Command Line Parameters Are Parsed](http://daviddeley.com/autohotkey/parameters/parameters.htm)

必要なところをかいつまんで説明しましょう。

Windowsにおいてコマンドを呼び出す最もプリミティブなAPI、--- つまり、Windowsで子プロセスを作るあらゆるアプリケーションが間接的に使うAPI ---、[`CreateProcess`](https://docs.microsoft.com/ja-jp/windows/win32/api/processthreadsapi/nf-processthreadsapi-createprocessa?redirectedfrom=MSDN)では、コマンドライン引数は、文字列の配列ではなく**一つの文字列**として渡されるそうなのです。  
しかし、それでは普通のC言語のアプリケーションを書いたとき`main`関数の`argv`が常に2つの文字列<small>（1つめはコマンドの名前ですね）</small>になってしまって不便なので、呼び出された**コマンドが<small>（`main`関数に渡す前に）</small>自らコマンドライン引数をパース**しているというのです！

その際どのようにコマンドライン引数をパースするかは、使用したプログラミング言語、特にCやC++ではVC++ランタイムのバージョンによって異なるそうです😵！

冒頭で紹介したダブルクォートに関するルールも、上記のページにもっと詳しく書かれています。  
つまりバッククォートだけでなくバックスラッシュを付ける必要があったのは、PowerShellの仕様ではなく、Windowsで動くコマンド全般に関する挙動だったんですね！  
どうりでPowerShellについて解説したページには出てこないワケです。

そして、今回は試してませんが、きっとコマンドプロンプトでも同じ問題にぶち当たるのでしょう。

Windowsではコマンドライン引数はアプリケーションがパースする、という話はどこかで聞き覚えがありましたが、ダブルクォートとかも自前で処理してたんですね😰...

ちなみに、実は同じ原因の問題は、`stack test`の`--test-arguments`を使うときにもしばしばぶち当たっていました。  
例えば、Hspecで書いたテストのうち、テストの説明に`foo bar`という（空白を含む）文字列を含むものを実行したいとき:

```pwsh
> stack test --fast --test-arguments "--match `"foo bar`""
Error: While constructing the build plan, the following exceptions were encountered:

Unknown package: bar

Some different approaches to resolving this:


Plan construction failed.
```

これも`git commit`の場合と同様、バッククォートの前にバックスラッシュを付ければ回避できます。

```pwsh
> stack test --fast --test-arguments "--match \`"foo bar\`""
```

もちろん、ダブルクォートの文字列リテラルの代わりに、シングルクォートの文字列リテラルでダブルクォートの前にバックスラッシュを付けるのでも🆗です:

```pwsh
> stack test --fast --test-arguments '--match \"foo bar\"'
```

これで完璧！🙌  
Windowsめんどくさいね！🏁
