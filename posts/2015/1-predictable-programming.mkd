---
title: 関数型プログラミングから予測可能プログラミングへ
subtitle: あるいは、私がHaskellに求めるもの
author: Yuji Yamamoto
tags: Haskell
date: July 1, 2015
...
---

*なんだか興に乗ってきたので、私もポエムめいたものを書いてみようと思います♪*

ここでは、私がHaskellをなぜ好むのか、いわゆる「関数型プログラミング」との関係に触れつつ説明することで、考えを少しずつまとめたい。
恐らく複数の記事に分けることとなるだろう。下心を言えばそのうち本にでもできるとなお面白い。  
この記事を通して、私、あるいは他のHaskellerの方々が、同僚などのHaskellに対する「誤解」を解き、
Haskellの普及を少しでも前進させることができたらよいと思う。

「Haskellは関数型プログラミング言語の王道である」、「モナドなどHaskellが提供する機能が関数型プログラミングの真髄である」という理解は、
もちろん「関数型プログラミング」の定義によるものではあるが、Haskellを理解する上で必ずしも適切ではないし、混乱のもとである。
ここ3年ほど趣味の範囲ながらHaskellを学ぶことで、私はそれに気づき、その「関数型プログラミング」らしい部分とそうでない部分との、絶妙な関係に、深く驚いた。  
そこでここでは私が最も好きなHaskellの特性を「**予測可能プログラミング**」という言葉に象徴させることで、そうした関係とその素晴らしさをわかりやすく整理したい。

# ここで言う、「関数型プログラミング」

今更改めて言うことでもないが、定義を明確にしないまま主張したり議論することは、不毛のもとである。  
というわけで、予めこの記事(と、この記事を複数に分割した場合にも)使用する「関数型プログラミング」の定義をここで述べておく。

- ここで言う「関数型プログラミング」とは下記に示す「純粋な関数」を**中心に**プログラムのソースコードを組み立てるプログラミングの**手法**のことである。
- ここで言う「純粋な関数」とは、
    - 与えられた入力(引数)に対応する出力(返り値)が一意に定まる(引数を決めれば返り値が必ず一つに決まる)、
    - 「出力(返り値)を返す」以外にプログラムの状態に影響を及ぼさない、

    「[サブルーチン](https://ja.wikipedia.org/w/index.php?title=%E3%82%B5%E3%83%96%E3%83%AB%E3%83%BC%E3%83%81%E3%83%B3&oldid=46711124)」
    のことである。

# ここで言う、「予測可能プログラミング」
