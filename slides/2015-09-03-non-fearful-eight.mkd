% いつもどおりのテンションでしゃべるEightの怪談
% 山本悠滋
% 2015-09-03 表参道.rb #4

# こんにちは！

- [山本悠滋](https://plus.google.com/u/0/+YujiYamamoto_igrep/about)([\@igrep](https://twitter.com/igrep)) 26歳♂
- 前回から続けて失礼。
- [Eight](https://8card.net/)のサーバーサイド担当です。

# こんにちは！

- マイブーム: レス画像にプリキュアの画像を使う。
- ![](/imgs/hobby-slack-1.png)
- ![](/imgs/hobby-slack-2.png)

# きょうのおはなし！

- 前回と同じぐらい軽いノリでEightチームに「本当にあった怖い話」をしますよ！
- ちなみにこのスライドの見出しまで前回といっしょですね！
    - ~~パワポとかじゃないからスライドのテーマを変えるのが面倒臭かったのはないしょだ！~~

# ~~Disclaimer!~~

~~（周りの出方を見て入れるか検討）~~

- ~~このスライドはEightチームにあった出来事を淡々と描くものです。~~
- ~~意外と意識が高いため、実はあまり怖くないかもしれません。~~
- ~~過度な期待はしないでください。~~

# その1: 見えない500

- それは、私がjoinして間もない2013年の春頃でした...。

# その1: 見えない500

- なぜか通らないControlerのテスト
- デバッグコードを仕込んでも辿り着くことなく、何事もなかったかのように500が返る。
- Response bodyも空っぽ...

# その1: 見えない500

- 標準出力が意味不明なので log/test.log とにらめっこしていると...
- なんかスタックトレースらしき文字列の配列をinspectした跡が。

# その1: 見えない500

イメージ

![](/imgs/2015-09-04-stacktrace.png)

# その1: 見えない500

- ( \^o\^)＜(Iさん（元自衛官）に聞いてみよう！)
- ( ◠‿◠ )☛   
  &nbsp; &nbsp; (`ApplicationController`で`rescue_from Exception`)
- ▂▅▇█▓▒░('ω')░▒▓█▇▅▂うわあああああ

# その1: 見えない500

「`ApplicationController`で`rescue_from Exception`」  
と言えば。

- （Controllerでの）すべて（の例外）を無に帰す最強の<ruby>黒幕<rp>&lt;</rp><rt>ラスボス</rt><rp>&gt;</rp></ruby>
    - ただの`NoMethodError`も、
    - `TypeError`も、
    - `ActiveRecord::ValidationError`も、
    - すべては闇に葬られるという...。

# その1: 見えない500

- 僕「...で、これ何してるんですか？」
- Iさん「起きた例外をDBに保存しています。開発中なにかおかしかったらこのページを見ます」
    - （保存した例外の一覧が見えるページを開く）
- 僕「...はぁ。(さっきのスタックトレースはこれにINSERTする時のか...)」

# その1: 見えない500

- 僕「でも、テストだと`database_cleaner`があるから消えちゃうじゃないっすか。今まで例外が見えなくて困ったことはないんですか？」
- Iさん「σ(ﾟ･ﾟ\*) うーん...」
- Iさん「そういえばすぐ気づいてコメントアウトしてますね...」

<div class="incremental">
`＿人人人人人人人人人人人人人人人人人人人人＿`
`＞  すぐ気づいてコメントアウトしてますね  ＜`
`￣Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y￣`
</div>

# その1: 見えない500

教訓:

- `rescue_from Exception` に限らず、
- `rescue Exception`は<span class="incremental">マジで</span><span class="incremental">真剣に</span><span class="incremental">頼むから</span>
    - 慎重に使おう。
- 怖いのはコードだけじゃない、怖くなったコードを受け入れてしまった人も（僕も含め）怖い。
- (\^\_\^;) ちなみに、その後`Rails.env`が`test`の時は`rescue_from Exception`しないよう変えて解決。

# その2: 逆さ仕様

- 要件: iPhone版で、Passbookを応用した名刺交換機能を作りたい。
    - 名刺を送信するユーザーの、プロフィール名刺の画像をPassbookの仕様に合わせたサイズに変換したい。
    - ただし、縦横比は保ったまま。
    - Passbookが指定するアスペクト比に合わない画像の場合、余った部分を透明にする。

# その2: 逆さ仕様

- [ググったら出てきたGihyo.jpに載っていた](http://gihyo.jp/dev/serial/01/ruby/0026?page=2)コードを参考に
- 即実装・即確認・即PR・即マージ
- ステージングで確認！<span class="incremental">ところが...</span>

# その2: 逆さ仕様

なんか妙に左上にずれた画像に... (;\_;)

# その2: 逆さ仕様

- どうもステージングと開発環境とでImageMagickのバージョンが大きく離れているのが原因らしい。
    - （ステージングのほうが新しい）
- どっかでエンバグしたのか、と思いいろいろなバージョンでやってみるも、どうも開発環境のバージョン以外うまく行かない...。

# その2: 逆さ仕様

- バグレポを送るべく再現コードを小さくするよういじっていたところ、
- 「(・－・)...ん？もしかして？」
- 使用していた`Magick::Image#extent`メソッドに渡す引数 `x`, `y` の正負を逆転させると、
- 元の通り普通に動いた！！！！！！１

# その2: 逆さ仕様

- この不思議ビヘイビアに挑むべくImageMagickのChangeLog探検すると...

<div class="incremental">
> 2010-09-13  6.6.4-2 Cristy  <quetzlzacatenango@image...>
>
> \* **Don't negate** the geometry offset for the `-extent` option.
</div>

- なんかそれっぽい記録が。

# その2: 逆さ仕様

- 何言ってんだよ逆に反転してんじゃねぇかよ... （#\^ω\^）ﾋﾟｷﾋﾟｷ
- と思うも、どうやらこれはImageMagickのCLI版、`convert`コマンドの`-extent`オプションの話らしい。

# その2: 逆さ仕様

と、言うことは、

- `convert`コマンド`-extent`オプションがバグっていたのを直した結果、
- `RMagick`始め数多存在するImageMagickのバインディングの`extent`メソッドの仕様も反転してしまった模様...。

# その2: 逆さ仕様

ちなみに

- [RMagickのドキュメント](https://rmagick.github.io/image2.html#extent)では、

<div class="incremental">
> The upper-left corner of the new image is positioned at **-x**, **-y**.
</div>

- と、すでに負の数で指定することが仕様であるかのように書かれているという現実...。

# その2: 逆さ仕様

教訓:

- これに限らず、ImageMagickは結構アレらしいので気をつけよう！
    - [ImageMagick has a ridiculous development workflow](http://www.imagemagick.org/discourse-server/viewtopic.php?t=25185)
- 当たり前だけどちゃんと**影響範囲を考えて**バグ修正や仕様変更をしよう！
- ちなみに、関連するコードは[私のブログ記事](http://the.igreque.info/posts/2014-04-13-imagemagick-negated-extent.html)に詳しくあるよ！

# その3: ありえへんキー 1

ある日。

- わけあってSさん（イケメン）が書いたspecを実行すると...
- 大量の外部キーエラー！

# その3: ありえへんキー 1

- 僕「ちょっと〜！Sさんちゃんとspec通してくださいよ〜！」
- Sさん「えっ、こっちでは通るんですけど...」
- 僕「えっ」
- （ちなみに、当時CIをこれから導入する、というところでした...）

# その3: ありえへんキー 1

- 確かに、お互いの`SHOW CREATE TABLE`を見ると食い違っている。
- ?(ο´･д･)??
- Nさん（後の出戻り）  
  「ああー、それeight.ymlが食い違っているからですね...。」
- 僕「えぇっ、そんなまさかそれって...」

# その3: ありえへんキー 1

`＿人人人人人人人人人人人人人人人人人人＿`
`＞  設定によって異なる外部キーの有無  ＜`
`￣Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y￣`

# その3: ありえへんキー 1

- 詳しい事情はわかりませんが、外部キーの扱いにあぐねてたどり着いた手段の模様...。
- もちろん現在は廃止済み。

# その3: ありえへんキー 1

教訓:

- データベースのスキーマはみんなちゃんと合わせよう。
- 外部キー制約の追加は計画的に。

# その4: ありえへんキー 2

とある新機能をテストしていた時のこと...。

- 僕「さぁ、ステージングでも確認するよ〜」

<div class="incremental">
`＿人人人人人人人人人人人人人人人人人人人＿`
`＞  突然のActiveRecord::RecordNotUnique  ＜`
`￣Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y￣`
</div>

# その4: ありえへんキー 2

- なぜかステージング環境のみに存在するユニークキーが...。
- 対象のテーブルのマイグレーションファイルを逆上ると、
- コメントアウトされた「`:unique => true`」がwww
- ボスに確認の上、手動で削除...。

# その4: ありえへんキー 2

教訓:

- お願いだからデータベースのスキーマはみんなちゃんと合わせてくださいマジで (;\_;)。

# その5: &gt;&gt;突然の 0.truncate&lt;&lt;

- ※原因不明、未解決の問題です。

# その5: &gt;&gt;突然の 0.truncate&lt;&lt;

ついに先月！

- わーい！ ヽ(=´▽\`=)ﾉ  
  弊社もRails 4系に上げたよ！（4.2とは言ってない）

# その5: &gt;&gt;突然の 0.truncate&lt;&lt;

ところがやっぱり...

- `varchar(255)`に設定していたカラムに上限以上の長さの文字列が書き込まれ、エラーが出るケースが多発。

# その5: &gt;&gt;突然の 0.truncate&lt;&lt;

補足:

- Rails 4以降、MySQLの接続設定 `SQL_MODE=STRICT_ALL_TABLES` というのがデフォルトで有効になりました。
- 例えば文字列がカラムによって決まった長さを超えてしまった場合、
    - これまでは長さが超えた分を**切り捨てていた**のを、
    - **エラーを出す**ようになりました。

# その5: &gt;&gt;突然の 0.truncate&lt;&lt;

そこで。

- 実際にエラーが起きたカラムの多くは本当に切り捨ててもよいカラムだったので、
- 参照している`ActiveRecord`クラスの`before_save`で適当に`truncate`することに。

# その5: &gt;&gt;突然の 0.truncate&lt;&lt;

ところが...

- 突如大量に落ちるspec
- 問題の`truncate`メソッドを呼ぶところで

<div class="incremental">
> wrong number of arguments (1 for 0)
</div>

- なる謎のエラーが。

# その5: &gt;&gt;突然の 0.truncate&lt;&lt;

- どうやら、どこかで`String`ではなく0(`Fixnum`)の`truncate`が呼ばれてしまうらしい...。
- 同様の修正をした箇所で必ず発生する模様...。
    - (\^\_\^;) 「同様の修正」をした時点で抽象化しろよ、というツッコミに対しては前向きに検討します。

# その5: &gt;&gt;突然の 0.truncate&lt;&lt;

- こちらのコードの問題なのかなのかActiveRecord側の問題なのかさえわからず、  
- 真相は闇の中...。
    - ~~（調べる気がない）~~

# その5: &gt;&gt;突然の 0.truncate&lt;&lt;

教訓:

- (\^\_\^;) スライドを書いているうちに改善点が見つかることもある。
    - みんな積極的に自チームの闇を発表して、己のコードと向きあおう！
- お後がよろしいようで。
