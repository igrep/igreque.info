% 細かすぎて伝わらないRuby最適化Tips
% 山本悠滋
% 2015-08-04 表参道.rb #3

# こんにちは！

- [山本悠滋](https://plus.google.com/u/0/+YujiYamamoto_igrep/about)([\@igrep](https://twitter.com/igrep)) 26歳♂
- [Eight](https://8card.net/)のサーバーサイド担当です。
- 最近、[Haskellポエム](/posts/2015/1-predictable-programming.html)に目覚めました。

# こんにちは！

こういうの↓とか、

![](/imgs/dokidoki-fairies-01.png)

# こんにちは！

こういうの↓が大好きなおおきなおともだちです！

![](/imgs/paff-01.jpg)

# きょうのおはなし！

- **ふっつー**のプログラムを書いている限りはまず問題にならないけど、
- Rubyならできる、**みみっちい**最適化についておはなしするよ！
- ベンチマークに使ったスクリプトはこちらで！
    - [trivial-optimization-in-ruby](https://github.com/igrep/trivial-optimization-in-ruby)

# きほん！

- オブジェクトづくりをへらそう！
- でも神経質になってもあんまりいいことはないよ！
    - Rubyのバージョンによって変わることもあるかもよ！

# その1! なんどもよばれる文字列リテラル

- Rubyさんは、文字列リテラルを評価するたびにあたらしいオブジェクトを作るよ！


- 文字列も必ず足されちゃう！

- なのでこんな風に長い文字列リテラルを書きたいときは...

    ```ruby
    ```

- よりも

    ```ruby
    ```

- の方が速い！ hoge

# その2! それ以外のオブジェクトもね！

- Hashリテラルも、配列リテラルも！
- 期間を作るメソッドなども！
- 定数の代わりにできない...

# その3! キーワード引数とHashならどうかな？

# その4! defineする？それともe・va・l？

- これ↓

    ```ruby
    def hoge a
      puts a
    end
    ```
- と、これ↓

    ```ruby
    define_method :hoge do|a|
      puts a
    end
    ```
- は、同じ？

## 違います。



# その5! coerceする？それともto_f？

# もっと細かい編! concat vs +=

- 多分知ってる人は多い:
  - `array1 += array2` は激遅で、
  - `array1.concat array2` は速い。

## なぜ？

- `array1`と`array2`の中身を**全部コピー**した上で
  `array1`にコピーし直しているから！

## でも、そうじゃないケースもあるよ！

- `array1 += array2`した結果の長さが**3以下**の場合

## なぜ？

※私の推測です。ソースは多分この辺。 hoge

- （確か）Ruby 1.9以降、長さ3以下のarrayに特別な最適化がかかりました。
- なんでも、array用のメモリ割り当てを減らして、
  一つの参照に（最大）3つの参照を詰め込む、というものらしい。
- 結果、長さ3を超えないかぎりは、
  `concat`だろうと`+=`だろうとレシーバーのコピーが発生する模様

## と、言うわけで！

- **絶対にこのarrayは長さ3を超えない！**
- という鉄壁の自信がある時は敢えて`+=`を使おう！

# 結論！

- オブジェクトづくりをへらそう！
- 他にもRubyじゃみみっちくチューニングする余地がある！
- よっぽど速度にうえたときだけやろう！
- もっと細かいはなしがあったらおしえてほしいな！
