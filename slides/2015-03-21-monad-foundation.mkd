% Monadなんてどうってことなかった話
% 山本悠滋
% 2015-03-21 モナド基礎勉強会

# こんにちは！

- [山本悠滋](https://plus.google.com/u/0/+YujiYamamoto_igrep/about)([\@igrep](https://twitter.com/igrep)) 25歳♂
- [Haskellの勉強会](http://connpass.com/series/754/)を毎月やっとります。

# Monadなんてどうってことなかった

- ただの型クラスやった
- 予めことわるとここでのMonadはプログラミングで使うMonadやった
- 特にHaskellのMonadが中心やった

# Monadなんてどうってことなかった

- ただの型クラスやった
- こういう定義の型クラスやった
    ```haskell
    class Monad m where
      return :: a -> m a
      (>>=) :: m a -> (a -> m b) -> m b
    ```

# ただの型クラスやけどちごた

- なんか変な使い方ができる
    ```haskell
    hoge uID = do
      fname <- lookup uID firstNameDB
      lname <- lookup uID lastNameDB
      return $ fname ++ lname
    ```
- だったり、

# ただの型クラスやけどちごた

- こんなん
    ```haskell
    foo = do
      tell ["hello, "]
      tell ["world!"]
    ```
- だったり、

# ただの型クラスやけどちごた

- こんなんだったり...。
    ```haskell
    main = do
      putStr "こんなんだったり"
      replicateM_ 3 $ do
        threadDelay 1000000
        putStr "."
      putStrLn "。"
    ```
- なんなんや！？何がどうなってるんや！？

# 間でなんかしてるだけやった

# desugarしたらもっと簡単やった

```haskell
lookup uID firstNameDB >>= (\fname -> ...)
```

- `>>=` のとこでなんかしてる！
- この場合JustかNothingか判定してる！

# ほかも大体一緒やった

- List: 要素を1個ずつ取り出してる！
- State: 関数が返した新しい状態で更新してる！
- Parser: 与えられた文字列を消費してる！
- IO: なんかいろいろやってる！
- なんやかんやで大事なことはだいたい`>>=`の中でやってる！
- せやからMonadはMonadにまとまるねん！

# 同じなのは

- 例のモナド則
- 「実質何もしない」処理(`return`)があること

# 同じなのは

- `do`記法で
    ```haskell
    do
      a <- do
        b <- foo
        bar b
      baz a
    ```
- みたいに書いたり、

# 同じなのは

- `do`記法で
    ```haskell
    do
      b <- foo
      do
        a <- bar b
        baz a
    ```
- みたいに結合の仕方に気を使わなくてよくなっていること
    - （この例と前のスライドの例が必ず同じ意味になること）

# 違うのは

- `>>=`でやってること
- 「例のモナド則」を満たせば何だっていい
- 何もしてなくたっていい(`Identity` Monad)
- 仕事してなくってもいい(ニート Monad)
- 複数のMonadがやってることを寄せ集めても（大抵）いい
    - Monad Transformer

# 何だったんだ...

- 何でもいいから難しい。
- なんだかいろいろできるのでまとまらない（ように見える）
- そのクセ`do`記法なんて用意して特別扱い。

# まとめ

- HaskellのMonadはあくまでも型クラスだった
- 大事なことはだいたい`>>=`でやってた
- やってることはみんな違った
    - みんな違って、みんないい。
    - ニートでもいい。
- 何でもできるからよくわからなくなっていた
